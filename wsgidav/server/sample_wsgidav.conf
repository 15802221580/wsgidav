
# Note: This file is in Python syntax and format

################################################################################
# WsgiDAV configuration file
# 
################################################################################
# INITIALIZATION - Do not modify this section

provider_mapping = {}
user_mapping = {}


def addShare(shareName, davProvider):
    provider_mapping[shareName] = davProvider

    
def addUser(realmName, user, password, description, roles=[]):
    realmName = "/" + realmName.strip(r"\/")
    userDict = user_mapping.setdefault(realmName, {}).setdefault(user, {})
    userDict["password"] = password
    userDict["description"] = description
    userDict["roles"] = roles

        
################################################################################
# SERVER OPTIONS

# Property Options

#propsmanager =  # uncomment this line to specify your own property manager                    
                 # default: wsgidav.property_manager.PropertyManager

#propsfile =     # uncomment this line to specify a storage file location 
                 # for wsgidav.property_manager.PropertyManager
                 # default: 'wsgidav-props.shelve' in the current directory


# Locks Options

#locksmanager =  # uncomment this line to specify your own locks manager                    
                 # default: wsgidav.lock_manager.LockManager

#locksfile =     # uncomment this line to specify a storage file location 
                 # for wsgidav.lock_manager.LockManager
                 # default: 'wsgidav-locks.shelve' in current directory
                 

# Domain Controller

#domaincontroller =   # uncomment this line to specify your own domain controller
                      # default: wsgidav.domain_controller
                      #          uses USERS section below


# HTTP Authentication Options

acceptbasic = True        # Allow basic authentication, True or False
acceptdigest = True       # Allow digest authentication, True or False
defaultdigest = True      # True (default digest) or False (default basic)

# Verbose Output

verbose = 2          # 0 - no output (excepting application exceptions)         
                     # 1 - show single line request summaries (HTTP logging)
                     # 2 - show additional events
                     # 3 - show full request/response header info (HTTP Logging)
                     #     request body and GET response bodies not shown


# Organizational Information - printed as a footer on html output

admin_email = "admin@example.com"
organization = "Example Org"

response_trailer = """\
Support contact: <a href='mailto:%s'>Administrator</a> at %s.
""" % (admin_email, organization)


################################################################################
# SHARES
#
# If you would like to publish files in the location '/v_root' through a
# WsgiDAV share 'files', so that it can be accessed by this URL:  
#     http://server:port/files 
# insert the following line:
#     addShare('files', '/v_root')
# or, on a Windows box:
#     addShare('files', 'c:\v_root')
#
# To access the same directory using a root level share 
#     http://server:port/
# insert this line: 
#     addShare('', 'c:\v_root')
#
# The above examples use wsgidav.fs_dav_provider.FilesystemProvider, which is 
# the default provider implementation.
# 
# If you wish to use a custom provider, an object must be passed as second 
# parameter. See the examples below.  

addShare("test", r"C:\temp")

### Add a read-only file share: 
#from wsgidav.fs_dav_provider import ReadOnlyFilesystemProvider
#addShare("tmp", ReadOnlyFilesystemProvider(r"C:\tmp"))

# Publish an SQL table
#from wsgidav.addons.simplemysqlabstractionlayer import SimpleMySQLResourceAbstractionLayer
#addrealm('testdb', 'database', 'testdb')
#addrealm('mysqldb', 'database', 'mysqldb')
#addAL("testdb", SimpleMySQLResourceAbstractionLayer("localhost", "", "anon", "test"))
#addAL("mysqldb", SimpleMySQLResourceAbstractionLayer("localhost", "", "anon", "mysql"))

# Publish a virtual structure
from wsgidav.addons.virtual_dav_provider import VirtualResourceProvider
addShare("virtres", VirtualResourceProvider())
#addShare("", VirtualResourceProvider())


################################################################################
# USERS
#
# This section is used by for authentication by the default Domain Controller.
#
# Users are defined per realm: 
#     addUser(<realm>, <user>, <password>, <description>)  
#
# Note that the default Domain Controller uses the share name as realm name.   
# 
# If no users are specified for a realm, no authentication is required.
# Thus granting read-write access to anonymous! 
#
# Note: If you wish to use Windows WebDAV support (such as Windows XP's My Network Places),
# you need to include the domain of the user as part of the username (note the DOUBLE slash), 
# such as:
# addUser('v_root', 'domain\\user', 'password', 'description')

addUser('', 'tester', 'tester', '')
addUser('', 'tester2', 'tester2', '')

#addUser('temp', 'tester', 'tester', '')
#addUser('temp', 'tester2', 'tester2', '')

addUser('virtres', 'tester', 'tester', '')
